#include:
#    - template: Code-Quality.gitlab-ci.yml

#code_quality:
#    artifacts:
#        paths: [gl-code-quality-report.json]

#GENERAL SETTINGS

# Top-level general rules determine when this pipeline is run:
# - only on merge requests, new tags and changes to dev
# - NOT on any branch except dev
# - will run detached merge request pipelines for any merge request,
#   targeting any branch
# Read more on when to use this template at
# https://docs.gitlab.com/ee/ci/yaml/#workflowrules
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml

workflow:
    rules:
        - if: $CI_MERGE_REQUEST_IID
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == "dev"

image: bchunlimited/gitlabci:ubuntu18.04

stages:
    - static_checks
    - build_depends
    - build
    - build_tests
    - qa_tests
    - benchmark_tests

cache: &global_cache_settings
    paths:
        - ccache/

.ccache_scripts:
    before_script:
        - mkdir -p ccache
        - export CCACHE_BASEDIR=${PWD}
        - export CCACHE_DIR=${PWD}/ccache
        - export CCACHE_COMPILERCHECK=content
        - ccache --zero-stats || true

# Linting
.cache-linting:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: linting_cache

check-formatting:
    stage: static_checks
    extends: .cache-linting
    needs: []
    script:
        - ./autogen.sh
        - ./configure --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports
        - make check-formatting

# x86_64 Linux + deps as via system lib
.cache-debian-nodeps:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: debian_cache-nodeps

build-debian-nodeps:
    stage: build
    extends: .cache-debian-nodeps
    needs: []
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --cache-file=config.cache --with-incompatible-bdb --with-gui=no --enable-glibc-back-compat --enable-reduce-exports
        - make -j `nproc`
        - ccache --show-stats
    artifacts:
        paths:
            - ./build/src/bitcoind
            - ./build/src/bitcoin-cli
            - ./build/src/bitcoin-miner
            - ./build/src/bitcoin-tx
            - ./build/src/test/test_bitcoin
            - ./build/src/bench/bench_bitcoin

build-debian-nodeps-qt:
    stage: build
    extends: .cache-debian-nodeps
    needs: []
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --cache-file=config.cache --with-incompatible-bdb --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-tests
        - make -j `nproc`
        - ccache --show-stats
    artifacts:
        paths:
            - ./build/src/bitcoind
            - ./build/src/bitcoin-cli
            - ./build/src/bitcoin-miner
            - ./build/src/bitcoin-tx

build-debian-tests-nodeps:
    stage: build_tests
    extends: .cache-debian-nodeps
    needs: ["build-debian-nodeps"]
    script:
        - (cd build/src; ./test/test_bitcoin)
    dependencies:
        - build-debian-nodeps

# Linux 64 bit, source deps
.cache-debian:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: debian_cache
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/x86_64-unknown-linux-gnu

build-debian-deps:
    stage: build_depends
    extends: .cache-debian
    needs: []
    script:
        - cd depends
        - make HOST=x86_64-unknown-linux-gnu -j `nproc`
    artifacts:
        paths:
            - depends/x86_64-unknown-linux-gnu

build-debian:
    stage: build
    extends: .cache-debian
    needs: [build-debian-deps]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --enable-shared --enable-debug --enable-zmq --enable-glibc-back-compat --enable-reduce-exports --cache-file=config.cache --prefix=$PWD/../depends/x86_64-unknown-linux-gnu CPPFLAGS=-DDEBUG_LOCKORDER
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-debian-deps
    artifacts:
        paths:
            - ./build/src/bitcoind
            - ./build/src/bitcoin-cli
            - ./build/src/bitcoin-miner
            - ./build/src/bitcoin-tx
            - ./build/src/test/test_bitcoin
            - ./build/src/bench/bench_bitcoin
            - ./build/src/.libs/libbitcoincash.so*
            - ./build/qa/*
            - ./qa/*

build-debian-rostrum:
    stage: build
    cache:
      paths:
        # Paths from Cargo Book, section "Caching the Cargo home in CI"
        - cargohome/bin
        - cargohome/registry/index
        - cargohome/registry/cache
        - cargohome/git/db

    needs: [build-debian-deps]

    variables:
      CARGO_HOME: ${CI_PROJECT_DIR}/cargohome

    before_script:
      - mkdir -p cargohome
      - mkdir -p build

    script:
        # add cargo to PATH
        - export PATH=$PATH:`pwd`/depends/x86_64-unknown-linux-gnu/native/bin

        # Prepare make file
        - ./autogen.sh > /dev/null
        - cd build
        - ../configure --cache-file=config.cache
            --prefix=$PWD/../depends/x86_64-unknown-linux-gnu > /dev/null

        - make rostrum

    dependencies:
        - build-debian-deps

    artifacts:
        paths:
            - ./build/src/rostrum

build-debian-tests:
    stage: build_tests
    extends: .cache-debian
    needs: ["build-debian"]
    script:
        - (cd build/src; ./test/test_bitcoin)
    dependencies:
        - build-debian

test-debian-qa:
    stage: qa_tests
    #extends: .cache-debian
    needs: ["build-debian"]
    script:
        - mkdir -p $CI_PROJECT_DIR/cores
        - mkdir -p $CI_PROJECT_DIR/saved-cores
        - echo $CI_PROJECT_DIR/cores/core.%e.%p.%h.%t | tee /proc/sys/kernel/core_pattern
        - cd build;
        - ./qa/pull-tester/rpc-tests.py --coverage --no-ipv6-rpc-listen --gitlab
    dependencies:
        - build-debian
    artifacts:
        when: on_failure
        paths:
            - ./qa/qa_tests/
            - $CI_PROJECT_DIR/saved-cores
            - ./build/src/bitcoind
            - ./build/ctorout.txt

test-debian-benchmarks:
    stage: benchmark_tests
    #extends: .cache-debian
    needs: ["build-debian-nodeps"]
    script:
        - (./build/src/bench/bench_bitcoin -evals=1)
    dependencies:
        - build-debian-nodeps

test-ubuntu-qa-rostrum:
    stage: qa_tests
    image: python:latest
    needs: ["build-debian", "build-debian-rostrum"]
    variables:
        PIP_CACHE_DIR: $CI_PROJECT_DIR/cache-pip
    cache:
        key: $CI_JOB_NAME
        paths:
            - cache-pip
    before_script:
        - pip install -q psutil
    script:
        - mkdir -p $CI_PROJECT_DIR/cores
        - mkdir -p $CI_PROJECT_DIR/saved-cores
        - echo $CI_PROJECT_DIR/cores/core.%e.%p.%h.%t | tee /proc/sys/kernel/core_pattern

        - export NODE_PATH=`pwd`/build/src/bitcoind
        - export ROSTRUM_PATH=`pwd`/build/src/rostrum
        - wget https://gitlab.com/bitcoinunlimited/rostrum/-/archive/master/rostrum-master.tar.gz
        - tar -zxf rostrum-master.tar.gz
        - ./rostrum-master/test/functional/test_runner.py --no-ipv6-rpc-listen --gitlab
    dependencies:
        - build-debian-rostrum
        - build-debian
    artifacts:
        when: on_failure
        paths:
            - ./qa/qa_tests/
            - $CI_PROJECT_DIR/saved-cores
            - ./build/src/bitcoind
            - ./build/ctorout.txt
# TODO: Use Junit as a logger
#test-debian-unittests:
#    stage: test
#    cache: {}
#    needs: ["build-debian-tests"]
#    script:
#        - (cd src; ./test/test_bitcoin --logger=HRF:JUNIT,message,junit_unit_tests.xml)
#    dependencies:
#        - build-debian-tests
#    artifacts:
#        reports:
#            junit: junit_unit_tests.xml


# bitcoind clang (no depend, only system lib installed via apt)
.cache-debian-clang:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: debian_cache_clang

.debian-clang-env:
    extends: .cache-debian-clang
    variables:
        CC: clang-10
        CXX: clang++-10

build-debian-clang:
    stage: build
    extends: .debian-clang-env
    needs: []
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --cache-file=config.cache --enable-zmq --with-gui=qt5 --with-incompatible-bdb CPPFLAGS=-DDEBUG_LOCKORDER
        - make -j `nproc`
        - ccache --show-stats
    artifacts:
        paths:
            - ./build/src/bitcoind
            - ./build/src/bitcoin-cli
            - ./build/src/bitcoin-miner
            - ./build/src/bitcoin-tx
            - ./build/src/test/test_bitcoin

build-debian-tests-clang:
    stage: build_tests
    extends: .debian-clang-env
    needs: ["build-debian-clang"]
    script:
        - (cd build/src; ./test/test_bitcoin)
    artifacts:
        when: on_failure
        paths:
            - ./build/src/test/
    dependencies:
        - build-debian-clang

# ARM64
.cache-arm-64:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: arm_cache-64
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/aarch64-linux-gnu

build-arm-depends-64:
    stage: build_depends
    extends: .cache-arm-64
    script:
        - cd depends
        - make HOST=aarch64-linux-gnu NO_QT=1 -j `nproc` NO_RUST=1
    artifacts:
        paths:
            - depends/aarch64-linux-gnu

build-arm-64:
    stage: build
    extends: .cache-arm-64
    needs: ["build-arm-depends-64"]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --prefix=$PWD/../depends/aarch64-linux-gnu --enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-arm-depends-64

# ARM32
.cache-arm-32:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: arm_cache-32
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/arm-linux-gnueabihf

build-arm-depends-32:
    stage: build_depends
    extends: .cache-arm-32
    script:
        - cd depends
        - make HOST=arm-linux-gnueabihf NO_QT=1 -j `nproc` NO_RUST=1
    artifacts:
        paths:
            - depends/arm-linux-gnueabihf

build-arm-32:
    stage: build
    extends: .cache-arm-32
    needs: ["build-arm-depends-32"]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --prefix=$PWD/../depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-arm-depends-32

# Win64
.cache-win-64:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: win_cache-64
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/x86_64-w64-mingw32

build-win-64-depends:
    stage: build_depends
    extends: .cache-win-64
    script:
        - cd depends
        - make HOST=x86_64-w64-mingw32 NO_QT=1 -j `nproc` NO_RUST=1
    artifacts:
        paths:
            - depends/x86_64-w64-mingw32

build-win-64:
    stage: build
    extends: .cache-win-64
    needs: ["build-win-64-depends"]
    script:
        - ./autogen.sh
        - - mkdir build; cd build
        - ../configure --enable-reduce-exports --prefix=$PWD/../depends/x86_64-w64-mingw32
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-win-64-depends

# Win32
.cache-win-32:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: win_cache-32
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/i686-w64-mingw32

build-win-32-depends:
    stage: build_depends
    extends: .cache-win-32
    script:
        - cd depends
        - make HOST=i686-w64-mingw32 NO_QT=1 -j `nproc` NO_RUST=1
    artifacts:
        paths:
            - depends/i686-w64-mingw32

build-win-32:
    stage: build
    extends: .cache-win-32
    needs: ["build-win-32-depends"]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --enable-reduce-exports --prefix=$PWD/../depends/i686-w64-mingw32
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-win-32-depends

# OSX
.cache-osx:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: osx_cache
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/x86_64-apple-darwin16

build-osx-depends:
    stage: build_depends
    extends: .cache-osx
    script:
        - mkdir -p depends/sdk-sources; mkdir depends/SDKs
        - curl --location --fail https://www.bitcoinunlimited.info/sdks/MacOSX10.14.sdk.tar.xz -o ./depends/sdk-sources/MacOSX10.14.sdk.tar.xz
        - tar -C depends/SDKs -xf depends/sdk-sources/MacOSX10.14.sdk.tar.xz
        - cd depends
        - make HOST=x86_64-apple-darwin16 -j `nproc` NO_RUST=1
        - ccache --show-stats
    artifacts:
        paths:
            - depends/x86_64-apple-darwin16
            - depends/SDKs

build-osx:
    stage: build
    extends: .cache-osx
    needs: ["build-osx-depends"]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --enable-reduce-exports --prefix=$PWD/../depends/x86_64-apple-darwin16
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-osx-depends
    artifacts:
        when: on_failure
        paths:
            - build/config.log
            - depends/x86_64-apple-darwin16/share/config.site

#Linux32-bit
.cache-debian-32:
    extends: .ccache_scripts
    cache:
        <<: *global_cache_settings
        key: debian_cache_32
        paths:
            - ccache/
            - depends/sources
            - depends/built
            - depends/i686-pc-linux-gnu

build-debian-32-depends:
    stage: build_depends
    extends: .cache-debian-32
    needs: []
    script:
        - cd depends
        - make HOST=i686-pc-linux-gnu -j `nproc` NO_RUST=1 NO_QT=1
    artifacts:
        paths:
            - depends/i686-pc-linux-gnu

build-debian-32:
    stage: build
    extends: .cache-debian-32
    needs: ["build-debian-32-depends"]
    script:
        - ./autogen.sh
        - mkdir build; cd build
        - ../configure --prefix=$PWD/../depends/i686-pc-linux-gnu  --enable-zmq --enable-glibc-back-compat --enable-reduce-exports
        - make -j `nproc`
        - ccache --show-stats
    dependencies:
        - build-debian-32-depends
    artifacts:
        when: on_failure
        paths:
            - build/config.log
            - depends/i686-pc-linux-gnu/include
