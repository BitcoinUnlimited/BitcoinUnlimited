// Copyright (c) 2016 Bitcoin Unlimited Developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "blockrelay/thinblock.h"
#include "bloom.h"
#include "chainparams.h"
#include "dosman.h"
#include "main.h"
#include "net.h"
#include "primitives/block.h"
#include "protocol.h"
#include "random.h"
#include "requestManager.h"
#include "serialize.h"
#include "streams.h"
#include "streams.h"
#include "txmempool.h"
#include "uint256.h"
#include "unlimited.h"
#include "util.h"
#include "utilstrencodings.h"
#include "version.h"

#include "test/test_bitcoin.h"

#include <atomic>
#include <boost/test/unit_test.hpp>
#include <sstream>
#include <string.h>


/**
 * Generally this series of tests will do Message Consistency checking for p2p messages.  If the messages are not
 * formatted correctly then a ban will result.
 *
 * However we will also do other types of exploit testing, as much as is possible, through the unit test framework.
 */

// NOTE:  When creating test cases be sure to always set your nVersion and fSuccessfullyConneted flag as follows.
//
//    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
//    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
//    dummyNode1.fSuccessfullyConnected = true;

CBlock TestBlock1() // Thanks dagurval :)
{
    // Block taken from bloom_tests.cpp merkle_block_1
    // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)
    // With 9 txes
    CDataStream stream(
        ParseHex(
            "0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c"
            "3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000"
            "000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc"
            "8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00"
            "000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab2"
            "4889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c31"
            "1b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac00"
            "0000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268"
            "ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc"
            "597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e5"
            "71fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a"
            "0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac00000000010000"
            "0002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e"
            "5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe6"
            "7512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf97584"
            "5c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035d"
            "defb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14"
            "a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14c"
            "a4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043"
            "410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9"
            "d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5"
            "c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e"
            "5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d7"
            "89904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c0000000000"
            "1976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb"
            "042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a"
            "4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987da"
            "d92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3"
            "cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a91455056148"
            "59643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00"
            "000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc"
            "2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f"
            "7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c6"
            "9b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa"
            "4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702"
            "200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f"
            "388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acf"
            "cab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48"
            "cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805"
            "c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1"
            "d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd20000"
            "00008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae"
            "2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07"
            "d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc65"
            "14edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558"
            "165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3"
            "a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8eb"
            "bb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166"
            "d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229ce"
            "fc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b6"
            "3f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a3316"
            "1dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688"
            "ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a905"
            "9cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c35306"
            "9e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c"
            "79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce30"
            "12e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c0000"
            "0000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000"),
        SER_NETWORK, PROTOCOL_VERSION);
    CBlock block;
    stream >> block;
    return block;
};
CBlock block = TestBlock1();


CService ipaddress(uint32_t i, uint32_t port)
{
    struct in_addr s;
    s.s_addr = i;
    return CService(CNetAddr(s), port);
}

// create dummy test addrs
CAddress addr1(ipaddress(0xa0b0c001, 10000));
CAddress addr2(ipaddress(0xa0b0c002, 10001));
CAddress addr3(ipaddress(0xa0b0c003, 10002));
CAddress addr4(ipaddress(0xa0b0c004, 10003));
CAddress addr5(ipaddress(0xa0b0c005, 10004));

// create recv queues
CDataStream vRecv1(SER_NETWORK, PROTOCOL_VERSION);
CDataStream vRecv2(SER_NETWORK, PROTOCOL_VERSION);
CDataStream vRecv3(SER_NETWORK, PROTOCOL_VERSION);
CDataStream vRecv4(SER_NETWORK, PROTOCOL_VERSION);
CDataStream vRecv5(SER_NETWORK, PROTOCOL_VERSION);

// create a basic nullhash
uint256 nullhash;


BOOST_FIXTURE_TEST_SUITE(exploit_tests, TestingSetup)

BOOST_AUTO_TEST_CASE(version_tests)
{
    int64_t nTime = GetTime();
    CAddress addrMe = GetLocalAddress(&addr1);
    uint64_t nServices = 1;

    // Recieve VERSION with no prior VERSION received yet.  Should not ban
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
    dummyNode1.nVersion = 0;
    dummyNode1.fSuccessfullyConnected = false;
    int nVersion = MIN_PEER_PROTO_VERSION;
    vRecv1 << nVersion << nServices << nTime << addrMe;
    ProcessMessage(&dummyNode1, NetMsgType::VERSION, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(dummyNode1.nVersion);
    BOOST_CHECK(!dosMan.IsBanned(addr1));

    // Receive VERSION with no prior VERSION received but invalid protocol version, which should result in ban
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode1a(INVALID_SOCKET, addr1, "", true);
    dummyNode1a.nVersion = 0;
    dummyNode1a.fSuccessfullyConnected = false;
    nVersion = MIN_PEER_PROTO_VERSION - 1;
    vRecv1 << nVersion << nServices << nTime << addrMe;
    ProcessMessage(&dummyNode1a, NetMsgType::VERSION, vRecv1, GetTime());
    SendMessages(&dummyNode1a);
    BOOST_CHECK(dummyNode1a.nVersion);
    BOOST_CHECK(dosMan.IsBanned(addr1));

    // Receive duplicate VERSION, nVersion will not be zero and should result in a disconnect
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode2(INVALID_SOCKET, addr2, "", true);
    dummyNode2.nVersion = MIN_PEER_PROTO_VERSION;
    vRecv1 << nVersion << nServices << nTime << addrMe;
    ProcessMessage(&dummyNode2, NetMsgType::VERSION, vRecv1, GetTime());
    SendMessages(&dummyNode2);
    BOOST_CHECK(dummyNode2.nVersion);
    BOOST_CHECK(dummyNode2.fDisconnect);

// Receive any message without receiving the version message first - this should cause a disconnect
#if 0 // with parallel message processing this is possible so should not cause a disconnect
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode3(INVALID_SOCKET, addr3, "", true);
    dummyNode3.nVersion = 0;
    ProcessMessage(&dummyNode3, NetMsgType::PING, vRecv1, GetTime());
    SendMessages(&dummyNode3);
    BOOST_CHECK(!dummyNode3.nVersion);
    BOOST_CHECK(dummyNode3.fDisconnect);
#endif
}

BOOST_AUTO_TEST_CASE(verack_tests)
{
    // Receive VERACK after VERSION sent
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode1.fSuccessfullyConnected = false;
    dummyNode1.tVersionSent = GetTime(); // should not cause ban if VERSION was sent
    ProcessMessage(&dummyNode1, NetMsgType::VERACK, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(dummyNode1.tVersionSent >= 0);
    BOOST_CHECK(!dosMan.IsBanned(addr1));

    // Receive VERACK but no VERSION sent
    dummyNode1.fSuccessfullyConnected = false;
    dummyNode1.tVersionSent = -1; // should cause disconnect
    ProcessMessage(&dummyNode1, NetMsgType::VERACK, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(dummyNode1.tVersionSent < 0);
    BOOST_CHECK(dummyNode1.fDisconnect);

    // Receive duplicate VERACK after VERSION sent. fSuccessfullyConnected will already be true.
    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode2(INVALID_SOCKET, addr2, "", true);
    dummyNode2.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode2.fSuccessfullyConnected = true; // should cause disconnect if VERSION was already sent
    dummyNode2.tVersionSent = GetTime();
    ProcessMessage(&dummyNode2, NetMsgType::VERACK, vRecv1, GetTime());
    SendMessages(&dummyNode2);
    BOOST_CHECK(dummyNode2.fSuccessfullyConnected);
    BOOST_CHECK(dummyNode2.fDisconnect);

    // Test the disconnect of a peer if the VERACK_TIMEOUT is exceeded
    int64_t nStartTime = GetTime();

    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode3(INVALID_SOCKET, addr3, "", true);
    dummyNode3.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode3.fSuccessfullyConnected = false;
    dummyNode3.tVersionSent = nStartTime;
    SetMockTime(nStartTime + VERACK_TIMEOUT + 1); // VERACK should not cause disconnect even if timeout exceeded
    ProcessMessage(&dummyNode3, NetMsgType::VERACK, vRecv1, GetTime());
    SendMessages(&dummyNode3);
    BOOST_CHECK(dummyNode3.tVersionSent >= 0);
    BOOST_CHECK(!dosMan.IsBanned(addr3));

    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode4(INVALID_SOCKET, addr4, "", true);
    dummyNode4.nVersion = 1;
    dummyNode4.fSuccessfullyConnected = false;
    dummyNode4.tVersionSent = nStartTime;
    SetMockTime(nStartTime + VERACK_TIMEOUT); // should not disconnect if timeout not exceeded and no VERACK
    ProcessMessage(&dummyNode4, NetMsgType::PING, vRecv1, GetTime());
    BOOST_CHECK(!dummyNode4.fDisconnect);

    vRecv1.clear();
    dosMan.ClearBanned();
    CNode dummyNode4a(INVALID_SOCKET, addr4, "", true);
    dummyNode4a.nVersion = 1;
    dummyNode4a.fSuccessfullyConnected = false;
    dummyNode4a.tVersionSent = nStartTime;
    SetMockTime(nStartTime + VERACK_TIMEOUT + 1); // should disconnect if timeout exceeded and no VERACK
    ProcessMessage(&dummyNode4a, NetMsgType::PING, vRecv1, GetTime());
    BOOST_CHECK(dummyNode4a.fDisconnect);
}

BOOST_AUTO_TEST_CASE(bu_version_tests)
{
    // Receive BUVERSION after VERACK sent
    vRecv1.clear();
    dosMan.ClearBanned();
    vRecv1 << 8333;

    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
    dummyNode1.fSuccessfullyConnected = true;
    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode1.fVerackSent = true; // should not cause ban if VERACK was sent
    dummyNode1.addrFromPort = 0;
    ProcessMessage(&dummyNode1, NetMsgType::BUVERSION, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(dummyNode1.fVerackSent);
    BOOST_CHECK(!dosMan.IsBanned(addr1));

    // Receive BUVERSION but no VERACK sent
    dummyNode1.fSuccessfullyConnected = true;
    dummyNode1.fVerackSent = false; // should cause ban
    dummyNode1.addrFromPort = 0;
    ProcessMessage(&dummyNode1, NetMsgType::BUVERACK, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(!dummyNode1.fVerackSent);
    BOOST_CHECK(dosMan.IsBanned(addr1));

    // Recieve duplicate BUVERSION. addrFromPort will not be zero
    CNode dummyNode2(INVALID_SOCKET, addr2, "", true);
    dummyNode2.fSuccessfullyConnected = true;
    dummyNode2.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode2.fVerackSent = true;
    dummyNode2.addrFromPort = 8333; // should ban because already have received a message
    ProcessMessage(&dummyNode2, NetMsgType::BUVERSION, vRecv1, GetTime());
    SendMessages(&dummyNode2);
    BOOST_CHECK(dummyNode2.addrFromPort);
    BOOST_CHECK(dosMan.IsBanned(addr2));
}

BOOST_AUTO_TEST_CASE(bu_verack_tests)
{
    // Receive BUVERACK after BUVERSION sent
    vRecv1.clear();
    dosMan.ClearBanned();

    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
    dummyNode1.fSuccessfullyConnected = true;
    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode1.fBUVersionSent = true; // should not cause ban if BUVERSION was sent
    ProcessMessage(&dummyNode1, NetMsgType::BUVERACK, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(dummyNode1.fBUVersionSent);
    BOOST_CHECK(!dosMan.IsBanned(addr1));

    // Receive BUVERACK but no BUVERSION sent
    dummyNode1.fSuccessfullyConnected = true;
    dummyNode1.fBUVersionSent = false; // should cause ban
    ProcessMessage(&dummyNode1, NetMsgType::BUVERACK, vRecv1, GetTime());
    SendMessages(&dummyNode1);
    BOOST_CHECK(!dummyNode1.fBUVersionSent);
    BOOST_CHECK(dosMan.IsBanned(addr1));
}

BOOST_AUTO_TEST_CASE(inv_tests)
{
    // send more INV than the limit of MAX_INV_SZ
    vRecv1.clear();
    dosMan.ClearBanned();
    std::vector<CInv> vInv;

    CInv testINV(MSG_TX, TestBlock1().GetHash());
    for (unsigned int i = 0; i < MAX_INV_SZ; i++)
        vInv.push_back(testINV);

    CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
    dummyNode1.fSuccessfullyConnected = true;
    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());

    SendMessages(&dummyNode1); // sending five messages below MAX_INV_SZ should not cause ban
    BOOST_CHECK(vInv.size() <= MAX_INV_SZ);
    BOOST_CHECK(!dosMan.IsBanned(addr1));


    vInv.push_back(testINV); // Add one more INV which should cause a ban

    dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode1.fSuccessfullyConnected = true;
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode1); // send four messages should not cause ban
    BOOST_CHECK(vInv.size() > MAX_INV_SZ);
    BOOST_CHECK(!dosMan.IsBanned(addr1));

    vRecv1 << vInv;
    ProcessMessage(&dummyNode1, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode1); // send a fifth message will cause a ban
    BOOST_CHECK(vInv.size() > MAX_INV_SZ);
    BOOST_CHECK(dosMan.IsBanned(addr1));


    // INV with invalid type
    vRecv1.clear();
    vInv.clear();
    dosMan.ClearBanned();

    CInv txINV(MSG_TX, TestBlock1().GetHash());
    CInv blockINV(MSG_BLOCK, TestBlock1().GetHash());
    CInv invalidINV(7, TestBlock1().GetHash());
    for (unsigned int i = 0; i < 10; i++)
    {
        vInv.push_back(txINV);
        vInv.push_back(blockINV);
    }
    vInv.push_back(invalidINV); // add one invalid

    CNode dummyNode3(INVALID_SOCKET, addr3, "", true);
    dummyNode3.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode3.fSuccessfullyConnected = true;
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode3, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode3, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode3, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode3, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode3); // send four messages should not cause ban
    BOOST_CHECK(!dosMan.IsBanned(addr3));

    vRecv1 << vInv;
    ProcessMessage(&dummyNode3, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode3); // send a fifth message should cause ban
    BOOST_CHECK(dosMan.IsBanned(addr3));


    // INV with null hash
    vRecv1.clear();
    vInv.clear();
    nullhash.SetNull();
    dosMan.ClearBanned();

    CInv nullINV(MSG_BLOCK, nullhash);
    for (unsigned int i = 0; i < 10; i++)
    {
        vInv.push_back(txINV);
        vInv.push_back(blockINV);
    }
    vInv.push_back(nullINV); // add one with null hash

    CNode dummyNode5(INVALID_SOCKET, addr5, "", true);
    dummyNode5.nVersion = MIN_PEER_PROTO_VERSION;
    dummyNode5.fSuccessfullyConnected = true;
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode5, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode5, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode5, NetMsgType::INV, vRecv1, GetTime());
    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode5, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode5); // send four messages should not cause ban
    BOOST_CHECK(!dosMan.IsBanned(addr5));

    vRecv1.clear();
    vRecv1 << vInv;
    ProcessMessage(&dummyNode5, NetMsgType::INV, vRecv1, GetTime());
    SendMessages(&dummyNode5); // send a fifth message should cause ban
    BOOST_CHECK(dosMan.IsBanned(addr5));
}

BOOST_AUTO_TEST_CASE(transaction_tests)
{
    // Transaction tests are handled in transaction_tests.cpp and fully covered there.
}

BOOST_AUTO_TEST_CASE(block_tests)
{
    // Block tests are handled in checkblock_tests.cpp and fully covered there.
}


BOOST_AUTO_TEST_CASE(thinblock_tests)
{
    {
        fImporting = false;
        fReindex = false;
        bool fInit = false;
        IsInitialBlockDownloadInit(&fInit);

        CBloomFilter filter;
        std::vector<uint256> vOrphanHashes;
        // Create 10 random hashes to seed the orphanhash vector.  This way we will create a bloom filter
        // with a size of 10 elements.
        std::string hash = "3fba505b48865fccda4e248cecc39d5dfbc6b8ef7b4adc9cd27242c1193c714";
        for (int i = 0; i < 10; i++)
        {
            std::stringstream ss;
            ss << i;
            hash.append(ss.str());
            uint256 random_hash = uint256S(hash);
            vOrphanHashes.push_back(random_hash);
        }
        std::unique_ptr<CNode> dummyNodeMem(new CNode(INVALID_SOCKET, addr1, "", true));
        CNode &dummyNode = *dummyNodeMem;
        BuildSeededBloomFilter(filter, vOrphanHashes, TestBlock1().GetHash(), &dummyNode, true);

        block = TestBlock1();
        CThinBlock thinblock(block, filter);
        CXThinBlock xthinblock(block, &filter);

        /** FILTERSIZEXTHIN tests */

        CDataStream ssSend(SER_NETWORK, INIT_PROTO_VERSION);
        ssSend << (uint32_t)36000;

        dosMan.ClearBanned();
        vRecv1.clear();
        vRecv1 << ssSend;
        {
            std::unique_ptr<CNode> dummyNodeAMem(new CNode(INVALID_SOCKET, addr1, "", true));
            CNode &dummyNodeA = *dummyNodeMem;
            dummyNodeA.nServices |= NODE_XTHIN;
            dummyNodeA.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNodeA.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNodeA, NetMsgType::FILTERSIZEXTHIN, vRecv1, GetTime());
            BOOST_CHECK(!dummyNodeA.fDisconnect); // node should not be disconnected
        }

        dosMan.ClearBanned();
        vRecv1.clear();
        vRecv1 << ssSend;

        {
            std::unique_ptr<CNode> dummyNodeBMem(new CNode(INVALID_SOCKET, addr1, "", true));
            CNode &dummyNodeB = *dummyNodeBMem;
            dummyNodeB.nServices |= NODE_BLOOM;
            dummyNodeB.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNodeB.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNodeB, NetMsgType::FILTERSIZEXTHIN, vRecv1, GetTime());
            BOOST_CHECK(dummyNodeB.fDisconnect); // node should be disconnected
        }

        dosMan.ClearBanned();
        vRecv1.clear();
        vRecv1 << ssSend;

        {
            std::unique_ptr<CNode> dummyNodeCMem(new CNode(INVALID_SOCKET, addr1, "", true));
            CNode &dummyNodeC = *dummyNodeCMem;
            dummyNodeC.nServices |= NODE_XTHIN;
            dummyNodeC.nServices |= NODE_BLOOM;
            dummyNodeC.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNodeC.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNodeC, NetMsgType::FILTERSIZEXTHIN, vRecv1, GetTime());
            BOOST_CHECK(!dummyNodeC.fDisconnect); // node should not be disconnected
        }

        // Send a filter message indicating a size that is less than the default 36000.
        // This should get a disconnect.
        CDataStream ssSend2(SER_NETWORK, INIT_PROTO_VERSION);
        ssSend2 << (uint32_t)35999;

        dosMan.ClearBanned();
        vRecv1.clear();
        vRecv1 << ssSend2;

        {
            std::unique_ptr<CNode> dummyNodeDMem(new CNode(INVALID_SOCKET, addr1, "", true));
            CNode &dummyNodeD = *dummyNodeDMem;
            dummyNodeD.nServices |= NODE_XTHIN;
            dummyNodeD.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNodeD.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNodeD, NetMsgType::FILTERSIZEXTHIN, vRecv1, GetTime());
            BOOST_CHECK(dummyNodeD.fDisconnect); // node should be disconnected
        }

        /** XTHINBLOCK message consistency checks */

        // testing empty missingtx vector
        dosMan.ClearBanned();
        CXThinBlock xthin = xthinblock;
        xthin.vMissingTx.clear(); // empty the missingtx vector. This should cause an error.
        vRecv1.clear();
        vRecv1 << xthin;

        {
            CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
            dummyNode1.nServices |= NODE_XTHIN;
            dummyNode1.nServices |= NODE_BLOOM;
            dummyNode1.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode1.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode1, NetMsgType::XTHINBLOCK, vRecv1, GetTime());
            SendMessages(&dummyNode1);
            BOOST_CHECK(xthin.vMissingTx.size() == 0);
            BOOST_CHECK(dosMan.IsBanned(addr1));
        }

        // test invalid or missing coinbase
        dosMan.ClearBanned();
        vRecv1.clear();
        xthin = xthinblock;
        xthin.vMissingTx[0] = xthin.vMissingTx[1]; // delete the coinbase. This should cause an error.
        vRecv1 << xthin;

        {
            CNode dummyNode1a(INVALID_SOCKET, addr1, "", true);
            dummyNode1a.nServices |= NODE_XTHIN;
            dummyNode1a.nServices |= NODE_BLOOM;
            dummyNode1a.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode1a.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode1a, NetMsgType::XTHINBLOCK, vRecv1, GetTime());
            SendMessages(&dummyNode1a);
            BOOST_CHECK(!xthin.vMissingTx[0].IsCoinBase());
            BOOST_CHECK(dosMan.IsBanned(addr1));
        }

        // test invalid block header
        dosMan.ClearBanned();
        vRecv1.clear();
        xthin = xthinblock;
        xthin.header.nBits = 1; // create invalid block header
        vRecv1 << xthin;

        CValidationState state;

        {
            CNode dummyNode1b(INVALID_SOCKET, addr1, "", true);
            dummyNode1b.nServices |= NODE_XTHIN;
            dummyNode1b.nServices |= NODE_BLOOM;
            dummyNode1b.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode1b.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode1b, NetMsgType::XTHINBLOCK, vRecv1, GetTime());
            SendMessages(&dummyNode1b);
            BOOST_CHECK(!CheckBlockHeader(xthin.header, state, true));
            BOOST_CHECK(dosMan.IsBanned(addr1));
        }
        /** THINBLOCK message consistency  checks */

        // test empty missingtx vector
        dosMan.ClearBanned();
        CThinBlock thin = thinblock;
        thin.vMissingTx.clear(); // empty the missingtx vector. This should cause an error.
        vRecv2 << thin;

        {
            CNode dummyNode2(INVALID_SOCKET, addr2, "", true);
            dummyNode2.nServices |= NODE_XTHIN;
            dummyNode2.nServices |= NODE_BLOOM;
            dummyNode2.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode2.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode2, NetMsgType::THINBLOCK, vRecv2, GetTime());
            SendMessages(&dummyNode2);
            BOOST_CHECK(thin.vMissingTx.size() == 0);
            BOOST_CHECK(dosMan.IsBanned(addr2));
        }

        // test invalid or missing coinbase
        dosMan.ClearBanned();
        vRecv2.clear();
        thin = thinblock;
        thin.vMissingTx[0] = thin.vMissingTx[1]; // delete the coinbase. This should cause an error.
        vRecv2 << thin;

        {
            CNode dummyNode2a(INVALID_SOCKET, addr2, "", true);
            dummyNode2a.nServices |= NODE_XTHIN;
            dummyNode2a.nServices |= NODE_BLOOM;
            dummyNode2a.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode2a.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode2a, NetMsgType::THINBLOCK, vRecv2, GetTime());
            SendMessages(&dummyNode2a);
            BOOST_CHECK(!thin.vMissingTx[0].IsCoinBase());
            BOOST_CHECK(dosMan.IsBanned(addr2));
        }

        // create invalid block header
        dosMan.ClearBanned();
        vRecv2.clear();
        thin = thinblock;
        thin.header.nBits = 1;
        vRecv2 << thin;

        {
            CNode dummyNode2b(INVALID_SOCKET, addr2, "", true);
            dummyNode2b.nServices |= NODE_XTHIN;
            dummyNode2b.nServices |= NODE_BLOOM;
            dummyNode2b.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode2b.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode2b, NetMsgType::THINBLOCK, vRecv2, GetTime());
            SendMessages(&dummyNode2b);
            BOOST_CHECK(!CheckBlockHeader(thin.header, state, true));
            BOOST_CHECK(dosMan.IsBanned(addr2));
        }


        /** XBLOCKTX message consistency checks */

        // test null hash
        CBlock block3 = TestBlock1();

        dosMan.ClearBanned();
        nullhash.SetNull();
        std::vector<CTransaction> vtx;
        for (auto &tx : block3.vtx)
            vtx.push_back(*tx);

        CXThinBlockTx xblocktx(nullhash, vtx);
        vRecv3 << xblocktx;

        {
            CNode dummyNode3(INVALID_SOCKET, addr3, "", true);
            dummyNode3.nServices |= NODE_XTHIN;
            dummyNode3.nServices |= NODE_BLOOM;
            dummyNode3.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode3.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode3, NetMsgType::XBLOCKTX, vRecv3, GetTime());
            SendMessages(&dummyNode3);
            BOOST_CHECK(nullhash.IsNull());
            BOOST_CHECK(dosMan.IsBanned(addr3));
        }

        // test no txns in xblocktx
        dosMan.ClearBanned();
        vRecv3.clear();
        std::vector<CTransaction> vTxEmpty;
        CXThinBlockTx xblocktx2(block3.GetHash(), vTxEmpty);
        vRecv3 << xblocktx2;

        {
            CNode dummyNode3a(INVALID_SOCKET, addr3, "", true);
            dummyNode3a.nServices |= NODE_XTHIN;
            dummyNode3a.nServices |= NODE_BLOOM;
            dummyNode3a.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode3a.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode3a, NetMsgType::XBLOCKTX, vRecv3, GetTime());
            SendMessages(&dummyNode3a);
            BOOST_CHECK(vTxEmpty.size() == 0);
            BOOST_CHECK(dosMan.IsBanned(addr3));
        }

        /** GET_XBLOCKTX message consistency checks */

        // test null hash
        dosMan.ClearBanned();
        nullhash.SetNull();
        std::set<uint64_t> setHashesToRequest;
        setHashesToRequest.insert(1); // add a hash so that we are not empty
        CXRequestThinBlockTx get_xblocktx(nullhash, setHashesToRequest);
        vRecv4 << get_xblocktx;

        {
            CNode dummyNode4(INVALID_SOCKET, addr4, "", true);
            dummyNode4.nServices |= NODE_XTHIN;
            dummyNode4.nServices |= NODE_BLOOM;
            dummyNode4.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode4.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode4, NetMsgType::GET_XBLOCKTX, vRecv4, GetTime());
            SendMessages(&dummyNode4);
            BOOST_CHECK(nullhash.IsNull());
            BOOST_CHECK(dosMan.IsBanned(addr4));
        }

        // test empty setHashesToRequest
        dosMan.ClearBanned();
        vRecv4.clear();
        setHashesToRequest.clear(); // clear the set
        CXRequestThinBlockTx get_xblocktx2(block3.GetHash(), setHashesToRequest);
        vRecv4 << get_xblocktx2;

        {
            std::unique_ptr<CNode> dummyNode4aMem(new CNode(INVALID_SOCKET, addr4, "", true));
            CNode &dummyNode4a = *dummyNode4aMem;
            dummyNode4a.nServices |= NODE_XTHIN;
            dummyNode4a.nServices |= NODE_BLOOM;
            dummyNode4a.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode4a.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode4a, NetMsgType::GET_XBLOCKTX, vRecv4, GetTime());
            SendMessages(&dummyNode4a);
            BOOST_CHECK(setHashesToRequest.empty());
            BOOST_CHECK(dosMan.IsBanned(addr4));


            /** GET_XTHIN message consistency checks */

            // test get_xthin with null hash
            dosMan.ClearBanned();
            nullhash.SetNull();
            CInv inv(MSG_XTHINBLOCK, nullhash);
            CBloomFilter filterMemPool;
            BuildSeededBloomFilter(filterMemPool, vOrphanHashes, inv.hash, &dummyNode4a, true);
            vRecv5 << inv;
            vRecv5 << filterMemPool;

            std::unique_ptr<CNode> dummyNode5Mem(new CNode(INVALID_SOCKET, addr5, "", true));
            CNode &dummyNode5 = *dummyNode5Mem;
            dummyNode5.nServices |= NODE_XTHIN;
            dummyNode5.nServices |= NODE_BLOOM;
            dummyNode5.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode5.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode5, NetMsgType::GET_XTHIN, vRecv5, GetTime());
            SendMessages(&dummyNode5);
            BOOST_CHECK(nullhash.IsNull());
            BOOST_CHECK(dosMan.IsBanned(addr5));

            // test get_xthin with invalid message type
            dosMan.ClearBanned();
            vRecv5.clear();
            CInv inv2(15, block3.GetHash()); // invalid type
            CBloomFilter filterMemPool2;
            BuildSeededBloomFilter(filterMemPool2, vOrphanHashes, inv2.hash, &dummyNode5, true);
            vRecv5 << inv2;
            vRecv5 << filterMemPool2;

            std::unique_ptr<CNode> dummyNode5aMem(new CNode(INVALID_SOCKET, addr5, "", true));
            CNode &dummyNode5a = *dummyNode5aMem;
            dummyNode5a.nServices |= NODE_XTHIN;
            dummyNode5a.nServices |= NODE_BLOOM;
            dummyNode5a.nVersion = MIN_PEER_PROTO_VERSION;
            dummyNode5a.fSuccessfullyConnected = true;
            ProcessMessage(&dummyNode5a, NetMsgType::GET_XTHIN, vRecv5, GetTime());
            SendMessages(&dummyNode5a);
            BOOST_CHECK(inv2.type != MSG_THINBLOCK && inv2.type != MSG_XTHINBLOCK);
            BOOST_CHECK(dosMan.IsBanned(addr5));
        }


        /* Thinblock memory exhaustion attack 1 */

        uint32_t old_excessiveBlockSize = excessiveBlockSize;

        // Shared pointers can be different sizes on different sysstems so get size of a shared pointer
        // and size of the block that we'll need for later comparisons.
        CTransactionRef pdummytx = nullptr;
        uint32_t nSharedTxSize = sizeof(pdummytx);
        uint32_t nSizeTxInBlock = 9 * nSharedTxSize; // there are 9 txn's in this block.

        // Get size of xthin and thinblock to be used later
        CXThinBlock xthinsize = xthinblock;
        vRecv1.clear();
        vRecv1 << xthinsize;
        uint32_t nSizeXthin = vRecv1.size();
        vRecv1.clear();
        CThinBlock thinsize = thinblock;
        vRecv1 << thinsize;
        uint32_t nSizeThinblock = vRecv1.size();
        vRecv1.clear();


        // test a single valid thinblock reconstruction that goes over the limit.
        // result: the peer should have it data cleared and node should be disconnected.
        CNode dummyNode6(INVALID_SOCKET, addr1, "", true);
        {
            dosMan.ClearBanned();
            CXThinBlock xthin2 = xthinblock;
            CXThinBlock xthin2a = xthinblock;
            CThinBlock thin2 = thinblock;

            // The number of tx bytes in this block is 3784 bytes however now that we use shared pointers for blocks
            // we use a different calculation for max block size possible.  In order for the node to be disconnected
            // we have to make the maxAllowedSize be less sizeof(shared_ptr) * maxMessageSizeMultiplier *
            // excessiveBlockSize / 158.
            // From the above the maxAllowedSize must be less than 16 * 9 (or 216) in order to trigger the oversized
            // block and disconnect. And therefore the excessiveBlockSize must be = (144 * 158) / (16 * 16) = 88.87,
            // or 88 to trigger a disconnection.
            excessiveBlockSize = (nSizeTxInBlock * 158) / (nSharedTxSize * 16); // 88

            // Add the node to vNodes and also we need a thinblockinflight entry
            {
                LOCK(dummyNode6.cs_mapthinblocksinflight);
                dummyNode6.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode6);
            }

            // Process an xthinblock which causes a disconnect
            dummyNode6.fDisconnect = false;
            xthin2.process(&dummyNode6, nSizeXthin, NetMsgType::XTHINBLOCK);
            BOOST_CHECK(dummyNode6.fDisconnect); // node should be disconnected
            BOOST_CHECK_EQUAL(0, dummyNode6.nLocalThinBlockBytes);
            BOOST_CHECK_EQUAL(-1, dummyNode6.thinBlockWaitingForTxns);
            BOOST_CHECK(dummyNode6.thinBlock.IsNull());
            BOOST_CHECK(dummyNode6.xThinBlockHashes.empty());
            BOOST_CHECK(dummyNode6.thinBlockHashes.empty());

            // clean up vNodes, mapthinblocksinflight and thinblock data
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode6, TestBlock1().GetHash());

            // Add the node to vNodes and also we need a thinblockinflight entry
            {
                LOCK(dummyNode6.cs_mapthinblocksinflight);
                dummyNode6.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode6);
            }

            // Process a regular thinblock
            dummyNode6.fDisconnect = false;
            thin2.process(&dummyNode6, nSizeThinblock);
            BOOST_CHECK(dummyNode6.fDisconnect); // node should be disconnected
            BOOST_CHECK_EQUAL(0, dummyNode6.nLocalThinBlockBytes);
            BOOST_CHECK_EQUAL(-1, dummyNode6.thinBlockWaitingForTxns);
            BOOST_CHECK(dummyNode6.thinBlock.IsNull());
            BOOST_CHECK(dummyNode6.xThinBlockHashes.empty());
            BOOST_CHECK(dummyNode6.thinBlockHashes.empty());

            // clean up vNodes, mapthinblocksinflight and thinblock data
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode6, TestBlock1().GetHash());

            // TODO: it would be great to have a test with an excessiveBlockSize of one byte larger
            //       so we can prove that a disconnect wouldn't happen for the edge case however
            //       that causes us to sent a messae back out through an invalid socket which then
            //       results in a crash.  It took a great deal of debugging to find this out so hence
            //       the comment here to help someone avoid any pitalls, for any future efforts.
        }


        /* Thinblock memory exhaustion attack 2 */

        // test correct disconnection of a multiple valid thinblock reconstruction that goes over the limit.
        // result: the peer with largest thinblock set of data should have it data cleared
        //         and node should be disconnected.
        CNode dummyNode7(INVALID_SOCKET, addr2, "", true);
        CNode dummyNode8(INVALID_SOCKET, addr3, "", true);
        CNode dummyNode9(INVALID_SOCKET, addr4, "", true);

        // The excessive block size is used as the limit for the maximum sum of bytes for
        // all currently processing thinblocks.
        {
            dosMan.ClearBanned();
            CXThinBlock xthin3 = xthinblock;

            excessiveBlockSize = 100;
            uint32_t nMaxBlockSizeAllowed = nSharedTxSize * excessiveBlockSize * 16 / 158;

            // Add the node to vNodes and also we need a thinblockinflight entry
            {
                LOCK(dummyNode6.cs_mapthinblocksinflight);
                LOCK(dummyNode7.cs_mapthinblocksinflight);
                LOCK(dummyNode8.cs_mapthinblocksinflight);
                LOCK(dummyNode9.cs_mapthinblocksinflight);
                dummyNode6.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode6);
                dummyNode7.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode7);
                dummyNode8.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode8);
                dummyNode9.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode9);
            }

            // manually set the nLocalThinBlockBytes to be lower than the actual bytes of the thinblock that we will
            // use to test the over limit condition. Also set the global bytes to be the sum of all current nodes.
            thindata.ResetThinBlockBytes();
            dummyNode6.nLocalThinBlockBytes = 0;
            dummyNode7.nLocalThinBlockBytes = 0;
            dummyNode8.nLocalThinBlockBytes = 0;
            dummyNode9.nLocalThinBlockBytes = 0;
            uint32_t nBytes1 = 2;
            uint32_t nBytes2 = 8;
            thindata.AddThinBlockBytes(nBytes1, &dummyNode7);
            thindata.AddThinBlockBytes(nBytes2, &dummyNode8);

            uint32_t nBytes3 = nMaxBlockSizeAllowed - nBytes1 - nBytes2 - (nSharedTxSize * 9) + 1;
            thindata.AddThinBlockBytes(nBytes3, &dummyNode9);

            // Process an xthinblock which will be the largest over limit and will be the one that gets disconnected.
            dummyNode6.fDisconnect = false;
            xthin3.process(&dummyNode6, nSizeXthin, NetMsgType::XTHINBLOCK);
            BOOST_CHECK(!dummyNode7.fDisconnect); // node should *not* be disconnected
            BOOST_CHECK_EQUAL(nBytes1, dummyNode7.nLocalThinBlockBytes);
            BOOST_CHECK(!dummyNode8.fDisconnect); // node should *not* be disconnected
            BOOST_CHECK_EQUAL(nBytes2, dummyNode8.nLocalThinBlockBytes);
            BOOST_CHECK(!dummyNode9.fDisconnect); // node should *not* be disconnected
            BOOST_CHECK_EQUAL(nBytes3, dummyNode9.nLocalThinBlockBytes);

            BOOST_CHECK(dummyNode6.fDisconnect); // node should be disconnected
            BOOST_CHECK_EQUAL(0, dummyNode6.nLocalThinBlockBytes);
            BOOST_CHECK_EQUAL(-1, dummyNode6.thinBlockWaitingForTxns);
            BOOST_CHECK(dummyNode6.thinBlock.IsNull());
            BOOST_CHECK(dummyNode6.xThinBlockHashes.empty());
            BOOST_CHECK(dummyNode6.thinBlockHashes.empty());

            // clean up vNodes, mapthinblocksinflight and thinblock data
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode6, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode7, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode8, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode9, TestBlock1().GetHash());
        }


        /* Thinblock memory exhaustion attack 3 */

        // test correct disconnection of a multiple valid thinblock reconstruction that goes over the limit.
        // However here, the last thinblock although causing the limit to be exceeded is not the largest.
        // result: the peer with largest thinblock set of data should have it data cleared
        //         and node should be disconnected.
        {
            dosMan.ClearBanned();
            CXThinBlock xthin4 = xthinblock;

            // This time we don't want the xthinblock to cause an overlimit but have some other node disconnected.
            excessiveBlockSize = 120;
            uint32_t nMaxBlockSizeAllowed = nSharedTxSize * excessiveBlockSize * 16 / 158;

            // Add the node to vNodes and also we need a thinblockinflight entry
            {
                LOCK(dummyNode6.cs_mapthinblocksinflight);
                LOCK(dummyNode7.cs_mapthinblocksinflight);
                LOCK(dummyNode8.cs_mapthinblocksinflight);
                LOCK(dummyNode9.cs_mapthinblocksinflight);
                dummyNode6.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode6);
                dummyNode7.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode7);
                dummyNode8.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode8);
                dummyNode9.mapThinBlocksInFlight[TestBlock1().GetHash()].nRequestTime = GetTime();
                vNodes.push_back(&dummyNode9);
            }

            // manually set two of the nLocalThinBlockBytes to be higher than the actual bytes of the thinblock that we
            // will use to test the over limit condition. Also set the global bytes to be the sum of all current nodes.
            thindata.ResetThinBlockBytes();
            dummyNode6.nLocalThinBlockBytes = 0;
            dummyNode7.nLocalThinBlockBytes = 0;
            dummyNode8.nLocalThinBlockBytes = 0;
            dummyNode9.nLocalThinBlockBytes = 0;
            thindata.AddThinBlockBytes(3000, &dummyNode7);
            uint32_t nBytes1 = 3;
            uint32_t nBytes2 = nMaxBlockSizeAllowed - nBytes1 - (nSharedTxSize * 9) + 1;
            thindata.AddThinBlockBytes(nBytes1, &dummyNode8);
            thindata.AddThinBlockBytes(nBytes2, &dummyNode9);

            // Process an xthinblock which will also be the over limit and will cause the largest block to disconnect
            // which in this case is dummyNode7. As it continues to process it (dummyNode6) will also go over the limit
            // and cause itself to be disconnected.
            dummyNode6.fDisconnect = false;
            dummyNode7.fDisconnect = false;
            xthin4.process(&dummyNode6, nSizeXthin, NetMsgType::XTHINBLOCK);
            BOOST_CHECK(!dummyNode8.fDisconnect); // node should *not* be disconnected
            BOOST_CHECK_EQUAL(nBytes1, dummyNode8.nLocalThinBlockBytes);
            BOOST_CHECK(!dummyNode9.fDisconnect); // node should *not* be disconnected
            BOOST_CHECK_EQUAL(nBytes2, dummyNode9.nLocalThinBlockBytes);

            BOOST_CHECK(dummyNode6.fDisconnect); // node should be disconnected
            BOOST_CHECK_EQUAL(0, dummyNode6.nLocalThinBlockBytes);
            BOOST_CHECK_EQUAL(-1, dummyNode6.thinBlockWaitingForTxns);
            BOOST_CHECK(dummyNode6.thinBlock.IsNull());
            BOOST_CHECK(dummyNode6.xThinBlockHashes.empty());
            BOOST_CHECK(dummyNode6.thinBlockHashes.empty());

            BOOST_CHECK(dummyNode7.fDisconnect); // node should be disconnected
            BOOST_CHECK_EQUAL(0, dummyNode7.nLocalThinBlockBytes);
            BOOST_CHECK_EQUAL(-1, dummyNode7.thinBlockWaitingForTxns);
            BOOST_CHECK(dummyNode7.thinBlock.IsNull());
            BOOST_CHECK(dummyNode7.xThinBlockHashes.empty());
            BOOST_CHECK(dummyNode7.thinBlockHashes.empty());

            // clean up vNodes, mapthinblocksinflight and thinblock data
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode6, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode7, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode8, TestBlock1().GetHash());
            vNodes.pop_back();
            thindata.ClearThinBlockData(&dummyNode9, TestBlock1().GetHash());
        }


        /*
         * Test the disconnection of a peers with thinblocks in flight that has gone over the timeout limit
         */
        {
            int64_t nStartTime = GetTime();
            uint256 hash1 = uint256S("3fba505b48865fccda4e248cecc39d5dfbc6b8ef7b4adc9cd27242c1193c7141");
            uint256 hash2 = uint256S("3fba505b48865fccda4e248cecc39d5dfbc6b8ef7b4adc9cd27242c1193c7142");

            CNode dummyNode1(INVALID_SOCKET, addr1, "", true);
            dummyNode1.fDisconnect = false;
            dummyNode1.fSuccessfullyConnected = true;

            CNode dummyNode2(INVALID_SOCKET, addr2, "", true);
            dummyNode2.fDisconnect = false;
            dummyNode2.fSuccessfullyConnected = true;

            SetMockTime(nStartTime);
            AddThinBlockInFlight(&dummyNode1, hash1);
            SetMockTime(nStartTime + 1);
            AddThinBlockInFlight(&dummyNode1, hash2);
            SetMockTime(nStartTime + 1);
            AddThinBlockInFlight(&dummyNode2, hash1);

            // Move clock forward to the boundary of the timeout interval
            // No nodes should be disconnected.
            SetMockTime(nStartTime + (6 * blkReqRetryInterval / 1000000));
            SendMessages(&dummyNode1);
            SendMessages(&dummyNode2);
            BOOST_CHECK(!dummyNode1.fDisconnect);
            BOOST_CHECK(!dummyNode2.fDisconnect);


            // Move clock forward to 1 second past the boundary of the timeout interval
            // DummyNode1 should be disconnected
            // DummyNode2 should still be connected because it was added one second later.
            SetMockTime(nStartTime + (6 * blkReqRetryInterval / 1000000) + 1);
            SendMessages(&dummyNode1);
            SendMessages(&dummyNode2);
            BOOST_CHECK(dummyNode1.fDisconnect);
            BOOST_CHECK(!dummyNode2.fDisconnect);

            // Move clock forward to 1 second past the boundary of the timeout interval
            // DummyNode2 should now be disconnected
            SetMockTime(nStartTime + (6 * blkReqRetryInterval / 1000000) + 2);
            SendMessages(&dummyNode2);
            BOOST_CHECK(dummyNode2.fDisconnect);
        }

        excessiveBlockSize = old_excessiveBlockSize; // reset

        // cleanup received queues
        vRecv1.clear();
        vRecv2.clear();
        vRecv3.clear();
        vRecv4.clear();
        vRecv5.clear();
    }
}

BOOST_AUTO_TEST_SUITE_END()
