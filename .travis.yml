sudo: required
dist: xenial
os: linux
language: minimal
cache:
  ccache: true
  directories:
  - depends/built
  - depends/sdk-sources
  - $HOME/.ccache

env:
  global:
    - MAKEJOBS=-j2
    - RUN_TESTS=false
    - RUN_FORMATTING_CHECK=false
    - DOCKER_NAME_TAG=ubuntu:18.04
    - CHECK_DOC=0
    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID
    - CCACHE_SIZE=100M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=$HOME/.ccache
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    - USE_CLANG=false
    - SDK_URL=https://www.bitcoinunlimited.info/sdks
    - LINTER_DEB_URL=https://www.bitcoinunlimited.info/depends-sources/
    - PYTHON_DEBUG=1
    - WINEDEBUG=fixme-all
    - DOCKER_PACKAGES="build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache python3"
    - LC_ALL=C.UTF-8

matrix:
  include:
    #bitcoind clang (no depend, only system lib installed via apt)
    - compiler: clang
      env:
        - USE_CLANG=true
        - CXX=clang++-5.0 CC=clang-5.0
        - CXXFLAGS="-std=c++11"
        - HOST=x86_64-unknown-linux-gnu
        - RUN_TESTS=false
        - PACKAGES="python3-zmq libzmq3-dev qttools5-dev-tools qttools5-dev clang-5.0 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-program-options-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev"
        - GOAL="install"
        - BITCOIN_CONFIG="--enable-zmq --with-gui=qt5 CC=clang-5.0 --with-incompatible-bdb CXX=clang++-5.0 CPPFLAGS=-DDEBUG_LOCKORDER CXXFLAGS=\"-std=c++11\""
    #bitcoind
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=x86_64-unknown-linux-gnu
        - PACKAGES="libedit2 python python3-zmq"
        - DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1"
        - RUN_TESTS=true
        - RUN_FORMATTING_CHECK=true
        - GOAL="install"
        - BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER" #need to test also libdb 4.8
    #ARM64
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=aarch64-linux-gnu
        - PACKAGES="g++-aarch64-linux-gnu"
        - DEP_OPTS="NO_QT=1"
        - GOAL="install"
        - BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi"
    #ARM32
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=arm-linux-gnueabihf
        - PACKAGES="g++-arm-linux-gnueabihf"
        - DEP_OPTS="NO_QT=1" GOAL="install"
        - BITCOIN_CONFIG="--enable-glibc-back-compat --enable-reduce-exports"
    #Win32
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=i686-w64-mingw32
        - DPKG_ADD_ARCH="i386"
        - DEP_OPTS="NO_QT=1"
        - PACKAGES="python3 nsis g++-mingw-w64-i686 wine32 wine-binfmt"
        - RUN_TESTS=true GOAL="install"
        - BITCOIN_CONFIG="--enable-reduce-exports"
    #Win64
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=x86_64-w64-mingw32
        - DEP_OPTS="NO_QT=1"
        - PACKAGES="python3 nsis g++-mingw-w64-x86-64 wine64 wine-binfmt"
        - RUN_TESTS=false GOAL="install"
        - BITCOIN_CONFIG="--enable-reduce-exports"
    #Linux32-bit + dash
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=i686-pc-linux-gnu
        - PACKAGES="g++-multilib bc python3-zmq"
        - DEP_OPTS="NO_QT=1" RUN_TESTS=true GOAL="install"
        - BITCOIN_CONFIG="--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++"
        - USE_SHELL="/bin/dash"
    #x86_64 Linux, No wallet (uses qt5 dev package instead of depends Qt to speed up build and avoid timeout)
    - compiler: gcc
      env:
        - CXX=g++ CC=gcc
        - HOST=x86_64-unknown-linux-gnu
        - PACKAGES="python3 qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev"
        - DEP_OPTS="NO_WALLET=1 NO_QT=1 ALLOW_HOST_PACKAGES=1"
        - RUN_TESTS=true GOAL="install" BITCOIN_CONFIG="--with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports"
    #Cross-Mac
    - compiler: gcc
      env:
        - HOST=x86_64-apple-darwin11
        - PACKAGES="cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git"
        - BITCOIN_CONFIG="--enable-reduce-exports"
        - OSX_SDK=10.11 GOAL="deploy"

before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")

install:
    - travis_retry docker pull "$DOCKER_NAME_TAG"
    - env | grep -E '^(CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL)' | tee /tmp/env
    - if [[ $HOST = *-mingw32 ]]; then
        DOCKER_ADMIN="--cap-add SYS_ADMIN";
      fi
    - DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$TRAVIS_BUILD_DIR,dst=$TRAVIS_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $TRAVIS_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)
    - DOCKER_EXEC () {
        docker exec $DOCKER_ID bash -c "cd $PWD && $*";
      }
    - if [ -n "$DPKG_ADD_ARCH" ]; then
        DOCKER_EXEC dpkg --add-architecture "$DPKG_ADD_ARCH";
      fi
    - travis_retry DOCKER_EXEC apt-get update
    - travis_retry DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $DOCKER_PACKAGES
    - if [ $RUN_FORMATTING_CHECK = "true" ]; then
        curl --location $LINTER_DEB_URL/libllvm3.8_3.8.1-27ubuntu1_amd64.deb -o llvm-3.8.deb;
        curl --location $LINTER_DEB_URL/clang-format-3.8_3.8.1-27ubuntu1_amd64.deb -o clang-format-3.8.deb;
        DOCKER_EXEC dpkg -i llvm-3.8.deb clang-format-3.8.deb;
      fi
before_script:
    - unset CC; unset CXX
    - if [ "$CHECK_DOC" = 1 ]; then DOCKER_EXEC contrib/devtools/check-doc.py; fi
    - mkdir -p depends/SDKs depends/sdk-sources
    - if [ -n "$OSX_SDK" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - if [ -n "$OSX_SDK" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - echo "USE_CLANG=$USE_CLANG"
    - if [[ $HOST = *-mingw32 ]]; then DOCKER_EXEC update-alternatives --set $HOST-g++ \$\(which $HOST-g++-posix\); fi
    - if [ "$USE_CLANG" = "false" ]; then DOCKER_EXEC CONFIG_SHELL= make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS; fi #use sys libraries for clang
script:
    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`
    - if [ -n "$USE_SHELL" ]; then export CONFIG_SHELL="$USE_SHELL"; fi
    - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST
    - BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib";
    - if [ "$USE_CLANG" = "false" ]; then DOCKER_EXEC ccache --max-size=$CCACHE_SIZE; fi
    - test -n "$USE_SHELL" && DOCKER_EXEC "$CONFIG_SHELL" -c "./autogen.sh 2>&1 > autogen.out" || ./autogen.sh 2>&1 > autogen.out || (cat autogen.out && false)
    - mkdir build && cd build
    - echo "BITCOIN_CONFIG_ALL=$BITCOIN_CONFIG_ALL"
    - echo "BITCOIN_CONFIG=$BITCOIN_CONFIG"
    - echo "GOAL=$GOAL"
    - DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
    - if [ "$HOST" = "x86_64-apple-darwin11" ]; then
        docker exec $DOCKER_ID bash -c "$TRAVIS_BUILD_DIR/contrib/devtools/xversionkeys.py > $TRAVIS_BUILD_DIR/src/xversionkeys.h < $TRAVIS_BUILD_DIR/src/xversionkeys.dat" ;
      fi
    - if [ "$RUN_FORMATTING_CHECK" = "true" ]; then DOCKER_EXEC make $MAKEJOBS check-formatting VERBOSE=1; fi
    - DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo "Build failure. Verbose build follows." && DOCKER_EXEC make $GOAL V=1 ; false ) ;
    - if [ "$RUN_TESTS" = "true" ] && { [ "$HOST" = "i686-w64-mingw32" ] || [ "$HOST" = "x86_64-w64-mingw32" ]; }; then
        travis_wait 50 DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1;
      fi
    - if [ "$RUN_TESTS" = "true" ] && ! { [ "$HOST" = "i686-w64-mingw32" ] || [ "$HOST" = "x86_64-w64-mingw32" ]; }; then
        DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1;
      fi
    - if [ "$RUN_TESTS" = "true" ]; then DOCKER_EXEC qa/pull-tester/rpc-tests.py --coverage --no-ipv6-rpc-listen; fi
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG

after_failure:
    - for i in `find /home/travis/ -name debug.log`; do echo $i; echo "-----"; tail -100 $i; done
    - for i in `find /tmp/ -name debug.log`; do echo $i; echo "-----"; tail -100 $i; done
    - for i in `find /home/travis/ -name bitcoin.conf`; do echo $i; echo "-----"; cat $i; done
    - for i in `find /tmp/ -name bitcoin.conf`; do echo $i; echo "-----"; cat $i; done
